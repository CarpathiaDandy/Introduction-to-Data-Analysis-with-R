?state.x77    # Help documentation
state.x77     # View the data
?USPersonalExpenditure
USPersonalExpenditure
?women
women
data()
# Example: assigning 'state.x77' to a variable
states <- state.x77
# View first 6 rows
head(states)
# View last 6 rows
tail(states)
summary(states)
str(states)
# Create vectors for days, temperature, and rainfall
days <- c("Mon", "Tue", "Wed", "Thu", "Fri")
temp <- c(22.2, 21, 23, 24.3, 25)
rain <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
# Combine into a data frame
df <- data.frame(days, temp, rain)
df
# Summary of df
summary(df)
# First row
df[1, ]
# First column
df[, 1]
# Fifth row
df[5, ]
df["rain"] # df
df$rain # vector
df[["rain"]] # vector
# Rows where 'rain' is TRUE
subset(df, subset = rain == TRUE)
# Rows where 'temp' is greater than 22
subset(df, subset = temp > 22)
# Ascending order by 'temp'
sorted_temp <- order(df$temp)
df[sorted_temp, ]
# Descending order by 'temp'
desc_temp <- order(-df$temp)
df[desc_temp, ]
# An empty data frame
empty <- data.frame()
# Two vectors
c1 <- 1:10
c2 <- letters[1:10]
# Combine vectors
df2 <- data.frame(col_name_1 = c1, col_name_2 = c2)
df2
nrow(df2)
ncol(df2)
colnames(df2)
rownames(df2)
# Value at row 5, column 2
df2[[5, 2]]
# Modify a single cell
df2[[2, "col_name_1"]] <- 99999
df2
# Row as a data frame
rowdf <- df2[1, ]
rowdf
# Row as a numeric or character vector
vrow_num <- as.numeric(as.vector(df2[1, ]))
vrow_char <- as.character(as.vector(df2[1, ]))
vrow_num
vrow_char
cars <- mtcars
head(cars)
# Accessing 'mpg' column
cars$mpg # vector
cars[, "mpg"] # vector
cars[["mpg"]] # vector
cars["mpg"] # df
df3 <- data.frame(col_name_1 = 2000, col_name_2 = "new")
df_new <- rbind(df2, df3)
df_new
df2$newcol <- rep(1, nrow(df2))
df2
df2[,"copy_of_col2"] <- df2$col_name_2
df2
df2[["col1_times_2"]] <- df2$col_name_1 * 2
df2
# Rename a single column
colnames(df2)[2] <- "NEW_COL_NAME"
df2
# Rename all columns
colnames(df2) <- c("col1", "col2", "col3", "col4", "col5")
df2
# Using logical operators
sub1 <- df2[(df2$col1 > 8 & df2$col5 > 10), ]
sub1
# Using subset()
sub2 <- subset(df2, col1 > 8 & col5 > 10)
sub2
# All columns except the first
df2[, -1]
# All columns except first and third
df2[, -c(1, 3)]
# Your solution here:
Name=c("Sam","Frank","Amy")
Age=c(22,25,26)
Weight=c(150,165,120)
Sex=c("M","M","F")
dftest=data.frame(Name,Age,Weight,Sex)
# Your solution here:
Name=c("Sam","Frank","Amy")
Age=c(22,25,26)
Weight=c(150,165,120)
Sex=c("M","M","F")
dftest=data.frame(Name,Age,Weight,Sex)
dftest
# Your solution here:
Name=c("Sam","Frank","Amy")
Age=c(22,25,26)
Weight=c(150,165,120)
Sex=c("M","M","F")
dftest=data.frame(Name,Age,Weight,Sex)
dftest[]
# Your solution here:
is.data.frame(mtcars)
# Matrix
mat <- matrix(1:25, nrow = 5)
mat
# Your solution here:
as.data.frame(mat)
# Your solution here:
df=mtcars
# Your solution here:
df[1:6,]
# Your solution here:
avgmpg=mean(df["mpg"])
avgmpg
# Your solution here:
avgmpg=mean(df$mpg)
avgmpg
# Your solution here:
subsetdf=subset(df,cyl=6)
# Your solution here:
subsetdf<-subset(df,cyl=6)
# Your solution here:
subsetcyl<-subset(df,cyl==6)
subsetcyl
# Your solution here:
subsetdf=subset(df,am,gear,carb)
# Your solution here:
subsetdf=subset(df,select=c(am,gear,carb)
subsetdf
# Your solution here:
subsetdf=subset(df,select=c("am","gear","carb")
subsetdf
# Your solution here:
subsetdf=subset(df, select=c(am,gear,carb))
subsetdf
# Your solution here:
df$performance=df$hp/df$wt
df
# Your solution here:
df$performance=round(df$performance)
df
# Your solution here:
avgmphpwt=mean(subset(df,wt>2.5,hp>100))
avgmphpwt
# Your solution here:
avgmphpwt=mean(subset(df,wt>2.5,hp>100)$mpg)
avgmphpwt
# Your solution here:
avgmphpwt=mean(subset(df,wt>2.5&hp>100)$mpg)
avgmphpwt
# Your solution here:
subset(df, rownames(df) == "Hornet Sportabout")$mpg
# Create a vector
v <- c(1, 2, 3, 4, 5)
# Create a 2-row matrix
m <- matrix(1:10, nrow = 2)
# Use the built-in 'women' dataset as a data frame
df <- women
# Combine into a single list
li <- list(v, m, df)
li
# Create a vector
v <- c(1, 2, 3, 4, 5)
# Create a 2-row matrix
m <- matrix(1:10, nrow = 2)
# Use the built-in 'women' dataset as a data frame
df <- women
# Combine into a single list
li <- list(v, m, df)
li
li <- list(sample_vec = v, sample_mat = m, sample_df = df)
li
# Sublist with the first element by index
li[1]
# Sublist with 'sample_vec' by name
li["sample_vec"]
# Access the vector directly
li[["sample_vec"]]
li$sample_vec
li$sample_mat
li$sample_df
# First element of the 'sample_vec'
li[["sample_vec"]][1]
# Subset of the 'sample_mat'
li[["sample_mat"]][1:2, 1:2]
# 'height' column of the 'sample_df'
li[["sample_df"]][, "height"]
# Create a new vector and append it to an existing element
v_new <- c(6, 7, 8)
li$sample_vec <- c(li$sample_vec, v_new)
li$sample_vec
# Remove 'sample_mat' from the list
li$sample_mat <- NULL
li
# Modify 'sample_df' by adding a new column
li$sample_df$age <- c(25, 30, 34, 45, 56, 32, 12, 12, 34, 34,
45, 66, 76, 22, 29)
li$sample_df
# Length of each element
lapply(li, length)
# Mean of each numeric element (returns NA for non-numeric)
sapply(li, function(x) if (is.numeric(x)) mean(x) else NA) # this may be hard for beginners but do not worry
unlisted_li <- unlist(li)
unlisted_li
str(li)
str(unlisted_li)
#str(li)
str(unlisted_li)
# Your code here:
numbers=c(10, 20, 30, 40, 50)
letters_vec=c("a", "b", "c", "d", "e")
df_sample=subset(df,select =c(mpg,cyl))
# Your code here:
numbers=c(10, 20, 30, 40, 50)
letters_vec=c("a", "b", "c", "d", "e")
df_sample=subset(mtcars,select =c(mpg,cyl))
my_list=list(numbers,letters,df_sample)
my_list
# Your code here:
numbers=c(10, 20, 30, 40, 50)
letters_vec=c("a", "b", "c", "d", "e")
df_sample <- mtcars[, c("mpg", "cyl")]
my_list=list(numbers,letters,df_sample)
my_list
# Your code here:
my_list$numbers
# Your code here:
my_list["numbers"]
my_list[["letters_vec"]]
my_list$df_sample$mpg
# Your code here:
numbers=c(10, 20, 30, 40, 50)
letters_vec=c("a", "b", "c", "d", "e")
df_sample <- mtcars[, c("mpg", "cyl")]
my_list=list(numbers,letters,df_sample)
my_list
# Your code here:
my_list["numbers"]
my_list[["letters_vec"]]
my_list$df_sample$mpg
# Your code here:
my_list[1]
my_list["numbers"]
my_list[["letters_vec"]]
my_list$df_sample$mpg
# Your code here:
my_list["numbers"]
my_list[["letters_vec"]]
my_list$df_sample$mpg
# Your code here:
my_list[numbers]
my_list[["letters_vec"]]
my_list$df_sample$mpg
# Your code here:
str(my_list)
my_list["numbers"]
my_list[["letters_vec"]]
my_list$df_sample$mpg
# Your code here:
numbers=c(10, 20, 30, 40, 50)
letters_vec=c("a", "b", "c", "d", "e")
df_sample <- mtcars[, c("mpg", "cyl")]
my_list <- list(numbers = numbers, letters_vec = letters_vec, df_sample = df_sample)
my_list
# Your code here:
my_list["numbers"]
my_list[["letters_vec"]]
my_list$df_sample$mpg
# Your code here:
my_list$numbers <- c(my_list$numbers, 60)
my_list$letters_vec <- c(my_list$letters_vec, "f")
my_list$df_sample$hp <- mtcars$hp
my_list
# Your code here:
my_list$letters_vec=NULL
my_list
# Your code here:
lapply(my_list)
# Your code here:
lapply(my_list,lenght)
# Your code here:
lapply(my_list,length)
# Your code here:
lapply(my_list,length)
sapply(my_list, function(x) if (is.numeric(x)) mean(x) else NA)
# Your code here:
flattened_list=unlist(my_list)
flattened_list
# Your code here:
str(my_list)
# Your code here:
new_list=list(log_vec = c(TRUE, FALSE, TRUE))
nested_li=list(my_list,new_list)
# Your code here:
new_list=list(log_vec = c(TRUE, FALSE, TRUE))
nested_li=list(my_list,new_list)
nested_li
# Your code here:
nested_li$my_list$log_vec
# Your code here:
nested_li$new_list[1]
# Your code here:
new_list <- list(log_vec = c(TRUE, FALSE, TRUE))
nested_li <- list(my_list, new_list)
print(nested_li)
# Your code here:
nested_li[[2]]$log_vec
# Your code here:
nested_li[2]$log_vec
# Your code here:
nested_li[[2]$log_vec
# Your code here:
nested_li[[2]]$log_vec
# Your code here:
matrix_sample <- matrix(1:9, nrow = 3, ncol = 3)
df_additional <- data.frame(
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 22)
)
additional_li <- list(matrix_sample = matrix_sample, df_additional = df_additional)
combined_li <- c(nested_li, additional_li)
combined_li
