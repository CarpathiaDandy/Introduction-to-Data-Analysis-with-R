print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x > 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x < 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
# Check if x has reached 10
if(x == 10) {
print("x is equal to 10! Terminating loop")
}
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x > 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x > 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x > 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x > 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x > 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x > 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x < 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
# Check if x has reached 10
if(x == 10) {
print("x is equal to 10! Terminating loop")
}
}
# Initialize variables
x <- 0
# Execute the loop while x is less than 10
while(x < 10) {
cat('x is currently:', x, '\n')
print('x is still less than 10, adding 1 to x')
# Increment x by 1
x <- x + 1
# Check if x has reached 10
if(x == 10) {
print("x is equal to 10!")
break
print("I will also print, woohoo!") # This line will not execute
}
}
# Vector to iterate over
x <- c(1, 2, 3, 4, 5, 6, 7, 8)
# Iterate over each element in the vector
for(i in x) {
# Skip odd numbers
if(i %% 2 != 0) {
next
}
# Print even numbers
print(i)
}
random_num <- rnorm(1)
while (TRUE) {
random_num <- rnorm(1)
print(random_num)
if (random_num > 1) {
break
}
}
random_num <- rnorm(1)
while (TRUE) {
random_num <- rnorm(1)
if (random_num < 0) {
next
}
print(random_num)
if (random_num > 1) {
break
}
}
random_num <- rnorm(1)
while (TRUE) {
random_num <- rnorm(1)
if (random_num < 0) {
next
}
print(random_num)
if (random_num > 1) {
break
}
}
random_num <- rnorm(1)
while (TRUE) {
random_num <- rnorm(1)
if (random_num < 0) {
next
}
print(random_num)
if (random_num > 1) {
break
}
}
product <- 1
n <- 1
while (product <= 10000000) {
n <- n + 1
product <- product * n
}
print(n)
sum_numbers <- 0
while (TRUE) {
num <- as.numeric(readline(prompt = "Enter a number: "))
if (num < 0) {
break
}
sum_numbers <- sum_numbers + num
}
print(paste("Sum of all entered numbers:", sum_numbers))
numbers <- numeric()
cumulative_sum <- 0
while (cumulative_sum <= 5) {
num <- runif(1,0,1)
numbers <- c(numbers, num)
cumulative_sum <- sum(numbers)
}
print(numbers)
numbers <- numeric()
cumulative_sum <- 0
while (num <= 0.9) {
num <- runif(1,0,1)
numbers <- c(numbers, num)
cumulative_sum <- sum(numbers)
}
print(numbers)
while (TRUE) {
num <- runif(1, min = 0, max = 1)
print(num)
if (num > 0.9) {
break
}
}
numbers <- numeric()
cumulative_sum <- 0
while (num <= 0.9) {
num <- runif(1,0,1)
numbers <- c(numbers, num)
cumulative_sum <- sum(numbers)
}
print(numbers)
mixed_list <- list(5, "hello", TRUE, 10.5, "world", FALSE)
i <- 1
while (i <= length(mixed_list)) {
if (is.numeric(mixed_list[[i]])) {
print(mixed_list[[i]])
}
i <- i + 1
}
sum_even <- 0
num <- 2
while (sum_even <= 100) {
sum_even <- sum_even + num
print(num)
num <- num + 2
}
secret_number <- 7
attempts <- 5
while (attempts > 0) {
guess <- as.numeric(readline(prompt = "Guess the secret number: "))
if (guess == secret_number) {
print("Congratulations! You guessed correctly.")
break
} else {
attempts <- attempts - 1
print(paste("Incorrect guess. You have", attempts, "attempts left."))
}
}
if (attempts == 0) {
print(paste("Sorry! You've used all your attempts. The secret number was", secret_number))
}
fib_sequence <- c(0, 1)
while (TRUE) {
next_fib <- sum(tail(fib_sequence, 2))
if (next_fib > 1000) {
break
}
fib_sequence <- c(fib_sequence, next_fib)
}
print(fib_sequence)
# Define a simple function
hello <- function() {
print("hello!")
}
# Call the function
hello()
helloyou <- function(name) {
print(paste("hello", name, "!"))
}
# Provide an argument
helloyou("Piotr")
add_num <- function(num1, num2) {
print(num1 + num2)
}
add_num(5, 10)
hello_someone <- function(name = "Janusz") {
print(paste("Hello", name))
}
# Uses default
hello_someone()
# Overwrite default
hello_someone("Piotr")
formal <- function(name = "Piotr", title = "Sir") {
return(paste(title, name))
}
# Calling the function
formal()                 # "Sir Piotr"
formal("Isaac Newton")   # "Sir Isaac Newton"
formal <- function(name = "Piotr", title = "Sir") {
return(paste(title, name))
}
# Calling the function
formal()                 # "Sir Piotr"
formal("Isaac Newton","dupa")   # "Sir Isaac Newton"
formal <- function(name = "Piotr", title = "Sir") {
return(paste(title, name))
}
# Calling the function
formal()                 # "Sir Piotr"
formal("Isaac Newton","His excelency")   # "Sir Isaac Newton"
formal <- function(name = "Piotr", title = "Sir") {
return(paste(title, name))
}
# Calling the function
formal()                 # "Sir Piotr"
formal("Isaac Newton","His Excelency")   # "Sir Isaac Newton"
var <- formal("Marie Curie", "Ms.")
var
pow_two <- function(input) {
res <- input ^ 2
return(result)
}
pow_two(4)    # returns 16
pow_two <- function(input) {
res <- input ^ 2
return(res)
}
pow_two(4)    # returns 16
# Attempt to access local variables
res  # Error: object 'res' not found
v <- "I'm global v"
stuff <- "I'm global stuff"
fun <- function(stuff) {
print(v)    # uses global v
stuff <- "Reassign stuff inside func"
print(stuff)
}
fun(stuff)
stuff  # Still "I'm global stuff" globally
var <- 5
modify_var <- function() {
var <<- var * 2
}
modify_var()
var  # now 10
numbers <- 1:5
squared <- numbers ^ 2
squared
numbers <- 1:5
squared <- sapply(numbers, function(x) x^2)
squared
apply_func <- function(func, num) {
return(func(num))
}
double_num <- function(x) {
return(x * 2)
}
result <- apply_func(double_num, 5)  # 10
result
# Your code here:
funk=function(int1,int2)
res=int1+int2
return(res)
# Your code here:
funk=function(int1,int2){
res=int1+int2
return(res)
}
funk(5,4)
# Your code here:
check_integer <- function(int, vec) {
if (int %in% vec) {
return(TRUE)
} else {
return(FALSE)
}
}
# Example usage:
check_integer(5, c(1, 2, 3, 4, 5))  # Returns TRUE
check_integer(6, c(1, 2, 3, 4, 5))  # Returns FALSE
# Your code here:
count_occurrences <- function(int, vec) {
return(sum(vec == int))
}
# Example usage:
count_occurrences(3, c(1, 2, 3, 4, 3, 5, 3))  # Returns 3
count_occurrences(6, c(1, 2, 3, 4, 3, 5, 3))  # Returns 0
# Your code here:
count_occurrences <- function(int, vec) {
return(sum(vec == int))
}
count_occurrences(3, c(1, 2, 3, 4, 3, 5, 3))
count_occurrences(6, c(1, 2, 3, 4, 3, 5, 3))
# Your code here:
is_prime <- function(n) {
if (n <= 1) {
return(FALSE)
}
for (i in 2:sqrt(n)) {
if (n %% i == 0) {
return(FALSE)
}
}
return(TRUE)
}
is_prime(7)
# Your code here:
factorial <- function(n) {
result <- 1
for (i in 1:n) {
result <- result * i
}
return(result)
}
factorial(5)
# Your code here:
greet <- function(first_name, last_name) {
return(paste("Hello,", first_name, last_name, "!"))
}
greet("John", "Doe")
# Your code here:
circle_area <- function(r) {
return(pi * r^2)
}
circle_area(5)
# Your code here:
string_length <- function(str) {
return(nchar(str))
}
string_length("Hello, World!")
library(tidyverse)  # For readr and general data wrangling
library(tidyverse)  # For readr and general data wrangling
library(tidyverse)  # For readr and general data wrangling
library(tidyverse)  # For readr and general data wrangling
# Create a vector of lowercase letters from 'a' to 'j'
let <- letters[1:10]
# Create a numeric vector from 1 to 10
num <- 1:10
# Create a mixed vector by concatenating numbers and letters
mix <- paste0(num, let)
# Combine into a data frame
df <- data.frame(
letters = let,
numbers = num,
mixed   = mix
)
df  # Display the data frame
# Write 'df' to a CSV file named 'data1.csv' without row names
write.csv(df, "data1.csv", row.names = FALSE)
# Write 'df' to a CSV file named 'data1.csv' without row names
write.csv(df, "data1.csv", row.names = FALSE)
# Read 'data1.csv' into a new data frame
df_read <- read.csv("data1.csv")
df_read
# Example: read CSV from a GitHub raw link
df_2 <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-28/language_countries.csv")
df_2
# Check and install if needed
if (!requireNamespace("readr", quietly = TRUE)) {
install.packages("readr")
}
library(readr)
# Check and install if needed
if (!requireNamespace("readr", quietly = TRUE)) {
install.packages("readr")
}
library(readr)
write_csv(df_2, "languages.csv")
df_3 <- read_csv("languages.csv")
df_3
df_skipped <- read_csv("languages.csv", skip = 4)
df_skipped
if (!requireNamespace("rio", quietly = TRUE)) {
install.packages("rio")
}
library(rio)
if (!requireNamespace("rio", quietly = TRUE)) {
install.packages("rio")
}
library(rio)
if (!requireNamespace("rio", quietly = TRUE)) {
install.packages("rio")
}
library(rio)
# Suppose we have 'data1.csv'
df_rio <- import("data1.csv")
df_rio
# Export 'df_rio' to different formats easily
export(df_rio, "output.xlsx")  # Excel
export(df_rio, "output.json")  # JSON
export(df_rio, "output.csv")  # CSV
export(df_rio, "output.yaml")  # CSV
if (!requireNamespace("writexl", quietly = TRUE)) {
install.packages("writexl")
}
library(writexl)
write_xlsx(df_read, "output.xlsx")
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
}
library(jsonlite)
toJSON(df_read, pretty = TRUE, auto_unbox = TRUE) %>%
writeLines("output.json")
if (!requireNamespace("jsonlite", quietly = TRUE)) {
install.packages("jsonlite")
}
library(jsonlite)
toJSON(df_read, pretty = TRUE, auto_unbox = TRUE) %>%
writeLines("output.json")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
library(readxl)
df_excel <- read_excel("output.xlsx", sheet = "Sheet1")
df_excel
df_json <- fromJSON("output.json")
df_json
# Your code here:
library(writexl)
students_df <- data.frame(
ID = 1:5,
Name = c("Alice", "Bob", "Charlie", "Diana", "Eve"),
Score = sample(50:100, 5, replace = TRUE)
)
write_xlsx(students_df, "students.xlsx")
# Your code here (writing):
library(readr)
countries_df <- data.frame(
Country = c("USA", "Canada", "Germany", "France", "Australia"),
Capital = c("Washington, D.C.", "Ottawa", "Berlin", "Paris", "Canberra"),
Population = c(331002651, 37742154, 83783942, 67081000, 25499884)
)
write_tsv(countries_df, "countries.tsv")
# Your code here (reading):
countries_read <- read_tsv("countries.tsv")
print(countries_read)
