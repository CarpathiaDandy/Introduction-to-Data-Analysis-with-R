install.packages("ggplot2")
library(ggplot2)
# update.packages()
update.packages()
# Example using ggplot2
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
labs(title = "Scatter Plot of MPG vs Weight",
x = "Weight (1000 lbs)",
y = "Miles/(US) gallon")
# Load necessary libraries
library(ggplot2)
# Display the first few rows of the dataset
head(mtcars)
# Calculate the mean miles per gallon
mean_mpg <- mean(mtcars$mpg)
mean_mpg
# Load dataset
data <- mtcars
# Summary statistics of the dataset
summary(data)
# Scatter plot of MPG vs Weight
ggplot(data, aes(x = wt, y = mpg)) +
geom_point(color = "blue", size = 3) +
labs(title = "MPG vs Weight",
x = "Weight (1000 lbs)",
y = "Miles Per Gallon") +
theme_minimal()
# Load the mtcars dataset
data <- mtcars
head(data)
# Summary statistics of the dataset
summary(data)
# Scatter plot of MPG vs Weight
ggplot(data, aes(x = wt, y = mpg)) +
geom_point(color = "blue", size = 3) +
labs(title = "MPG vs Weight",
x = "Weight (1000 lbs)",
y = "Miles Per Gallon") +
theme_minimal()
browseVignettes(package = "ggplot2")
# Adding two numbers
1 + 2
# Subtracting two numbers
5 - 3
# Multiplying two numbers
4 * 7
# Dividing two numbers
10 / 2
# Exponentiation
2^3
# Modulo (remainder of division)
5 %% 2
5 %/% 2
(3 + 2) * (10 - 5) / 5^2
income <- 100
tax <- 0.1
# Display the variables
income
tax
# Calculate net income after tax
net_income <- income * (1 - tax)
net_income
income <- 150
income
v1 <- c(1, 2, 3, 4, 5)
v1
class(v1)
v2 <- c("A", "B", "C")
v2
class(v2)
# Mixing logical and numeric
v4 <- c(FALSE, 2)
v4  # FALSE is coerced to 0
# Mixing character and numeric
v5 <- c("A", 1)
v5  # 1 is coerced to "1"
temps <- c(22, 21, 28, 23, 19, 25, 21)
names(temps) <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
temps
5 > 6       # FALSE
6 >= 6      # TRUE
3 < 2       # FALSE
5 == 5      # TRUE
5 != 2      # TRUE
v1 <- c(1, 2, 3)
v2 <- c(10, 20, 30)
v1 < v2
v1 <- c(1, 2, 3,4)
v2 <- c(10, 20, 30)
v1 < v2
v1 <- c(1, 2, 3)
v2 <- c(10, 20, 30,5)
v1 < v2
v1 <- c(1, 2, 3)
v2 <- c(10, 20, 30,5)
v1 < v2
v1 <- c(1, 2, 3)
v2 <- c(10, 20, 30,5)
v1 < v2
v1 <- c(1, 2, 3,2)
v2 <- c(10, 20, 30,5)
v1 < v2
v1 <- c(1, 2, 3,8)
v2 <- c(10, 20, 30,5)
v1 < v2
v1 <- c(1, 2, 3)
v2 <- c(10, 20, 30,5)
v1 < v2
v1 <- c(1, 2, 3,8)
v2 <- c(10, 20, 30)
v1 < v2
v1 <- c(100, 200, 300)
v2 <- c("a", "b", "c")
# Show the entire vectors
v1
v2
# Access the second element
v1[2]
v2[2]
v1[c(1, 2)]
v2[c(2, 3)]
v2[c(1, 3)]
v <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
v[2:4]          # elements 2 to 4
v[c(1, 7:9)]    # element 1 and elements 7 to 9
v_named <- c(1, 2, 3, 4)
names(v_named) <- c("a", "b", "c", "d")
v_named["a"]
v <- c(1, 2, 3, 4)
v[v > 2]
v > 2
# Your answer here:
5^8
# Your answer here:
numbers=c[16, 40, 85, 41, 54, 19, 56, 97]
# Your answer here:
numbers=c(16, 40, 85, 41, 54, 19, 56, 97)
# Your answer here:
names(numbers)=c(Jan, Feb, Mar, Apr, May, Jun, Jul, Aug)
# Your answer here:
names(numbers)=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug")
# Your answer here:
names(numbers)=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug")
names(numbers)
# Your answer here:
average=mean(numbers)
# Your answer here:
average=mean(numbers)
average
# Your answer here:
over_45=c[numbers>45]
# Your answer here:
over_45=c(numbers>45)
over_45
# Your answer here:
numbers_filtered=c(numbers=over_45)
# Your answer here:
numbers_filtered=c(numbers=over_45)
numbers_filtered
# Your answer here:
numbers_filtered=c(numbers=over_45)
numbers_filtered
# Your answer here:
numbers_filtered=numbers[over_45]
numbers_filtered
# Your answer here:
max(numbers)
# Your answer here:
min(numbers)
# Your answer here:
sum(numbers)
help.search("regression")
# Your answer here:
?seq
sequence=c(seq())
# Your answer here:
sequence=c(seq(1,20,2))
sequence
# Your answer here:
vectrordata=c(rep("Data",5))
vectrordata
# Your answer here:
combined=c(v1,v2)
combined
# Your answer here:
mix_vec=c(`3, "abc", TRUE`)
# Your answer here:
mix_vec=c(`3', "abc", TRUE`)
# Your answer here:
mix_vec=c(3, "abc", TRUE)
class(mix_vec)
# Your answer here:
mix_vec=c('3, "abc", TRUE')
class(mix_vec)
# Your answer here:
mix_vec=c('3, "abc", TRUE')
class(mix_vec)
# Your answer here:
mix_vec=c(3, "abc", TRUE)
class(mix_vec)
# Your answer here:
letters_vec=c("A", "B", "C", "D")
search(letters_vec,"C")
# Your answer here:
letters_vec=c("A", "B", "C", "D")
"C" %in% letters_vec
"X" %in% letters_vec
# Creating a vector of numbers from 1 to 20
v <- 1:20
v
# Creating a matrix from vector v (default: filled by columns)
matrix(v)
# Creating a matrix with 2 rows (still filled by columns by default)
matrix(v, nrow = 2)
# Filling by columns
matrix(1:20, nrow = 4, byrow = FALSE)
# Filling by rows
matrix(1:20, nrow = 4, byrow = TRUE)
# Two example vectors
v1 <- c(79, 66, 25, 75, 38, 78, 40, 65, 54, 82, 56, 78)
v2 <- c(28, 2, 29, 45, 69, 7, 7, 9, 99, 74, 11, 34)
# Combine these vectors into one
vecs <- c(v1, v2)
# Create a matrix from the combined vector (two rows, fill by row)
vec_matrix <- matrix(vecs, byrow = TRUE, nrow = 2)
vec_matrix
# Check the number of columns
ncol(vec_matrix)
# Vectors for column (month) and row (items) names
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
"Sep", "Oct", "Nov", "Dec")
items <- c("A", "B")
# Assign column names and row names
colnames(vec_matrix) <- months
rownames(vec_matrix) <- items
vec_matrix
# Create a 10x10 matrix
mat <- matrix(1:100, byrow = TRUE, nrow = 10)
mat
4 * mat
mat / 10
mat ^ 2  # each element squared
mat > 50
mat + mat
mat / mat
mat * mat
mat %*% mat
colSums(vec_matrix)
rowSums(vec_matrix)
colMeans(vec_matrix)
rowMeans(vec_matrix)
# A new vector to add as another row
v3 <- c(12, 7, 43, 45, 37, 23, 97, 19, 12, 34, 16, 39)
# Bind it to vec_matrix as a new row, naming it 'C'
vec_matrix <- rbind(vec_matrix, "C" = v3)
vec_matrix
avg <- rowMeans(vec_matrix)
vec_matrix <- cbind(vec_matrix, avg)
vec_matrix
# Selecting the first row
mat[1, ]
# Selecting the first column
mat[, 1]
# Selecting the first three rows
mat[1:3, ]
# Selecting a top-left submatrix (2 rows x 3 columns)
mat[1:2, 1:3]
# Selecting a center submatrix (rows 4-6, columns 4-6)
mat[4:6, 4:6]
# Your answer here:
A=c(1, 2, 3)
b-c(4, 5, 6)
# Your answer here:
A=c(1, 2, 3)
B=c(4, 5, 6)
matrixtwovec <- rbind(A, B)
matrixtwovec
# Your answer here:
matrixthreebythree=matrix(seq(1,9,1),nrow=3)
matrixthreebythree
# Your answer here:
matrixthreebythree=matrix(seq(1,9,1),nrow=3,byrow=TRUE)
matrixthreebythree
# Your answer here:
is.matrix(mat)
# Your answer here:
mat2=matrix(seq(1,25,1),nrows=5,byrow = TRUE)
# Your answer here:
mat2=matrix(seq(1,25,1),nrow=5,byrow = TRUE)
# Your answer here:
mat2=matrix(seq(1,25,1),nrow=5,byrow = TRUE)
mat2
# Your answer here:
mat2[2:3,2:3]
# Your answer here:
mat2[4:5,4:5]
# Your answer here:
sum(mat2)
# Your answer here:
rand_mat=matrix(runif(20, min = 0, max = 1),nrows=4)
# Your answer here:
rand_mat=matrix(runif(20, min = 0, max = 1),nrow=4)
# Your answer here:
rand_mat=matrix(runif(20, min = 0, max = 1),nrow=4)
rand_mat
# Your answer here:
mat2_transposed=t(mat2)
# Your answer here:
mat2_transposed=t(mat2)
mat2_transposed
# Your answer here:
invert_mat=matrix(c(1,2,3,4),nrow=2)
# Your answer here:
invert_mat=matrix(c(1,2,3,4),nrow=2)
solve(invert_mat)
# Your answer here:
invert_mat=matrix(c(1,2,3,4),nrow=2)
solved=solve(invert_mat)
solved
solved*invert_mat
# Your answer here:
invert_mat=matrix(c(1,2,3,4),nrow=2)
solved=solve(invert_mat)
solved
solved%*% invert_mat
# Your answer here:
det(invert_mat)
